name: 'Continuous Integration'
on:
  workflow_dispatch:
  push:
    branches-ignore:
      - v1
    tags-ignore:
      - v1.*

jobs:
  run-testsuite:
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-13', 'macos-14']
    runs-on: '${{ matrix.os }}'
    name: 'Run Testsuite'
    steps:
#      - name: 'Determine latest MacPorts Version'
#        id: latest-version
#        run: |
#          macports_release_url=$(curl https://raw.githubusercontent.com/macports/macports-base/master/config/RELEASE_URL || curl https://trac.macports.org/export/HEAD/macports-base/config/RELEASE_URL || curl https://distfiles.macports.org/MacPorts/RELEASE_URL)
#          echo "latest_version=$(echo $macports_release_url | awk -F'/v' '{ print $NF }')" >> $GITHUB_OUTPUT
#      
      - uses: actions/checkout@v4
      - name: 'Run testsuite'
        run: development/testsuite

  install-macports:
    needs: run-testsuite
    strategy:
      matrix:
        os: ['macos-13', 'macos-14']
        prefix: ['local']
        include:
          - os: 'macos-14'
            prefix: 'package'

    runs-on: '${{ matrix.os }}'
    name: 'Install MacPorts'
    steps:
      - uses: actions/checkout@v4
      - name: 'Get version From parameters file'
        id: parameters-version
        run: |
          version=$(yq ".version" < "testsuite/run-testsuite-on-${{ matrix.os }}-${{ matrix.prefix }}.yaml")
          . "./subr/check_version.sh" "${version}"
          echo "macports_version=${macports_version}" >> $GITHUB_OUTPUT

      - uses: ./
        id: 'macports'
        with:
          parameters: 'testsuite/run-testsuite-on-${{ matrix.os }}-${{ matrix.prefix }}.yaml'

      - name: 'Validate installed MacPorts version'
        shell: bash
        run: |
          test "$(port version)" = 'Version: ${{ steps.parameters-version.outputs.macports_version }}'

      - name: 'Validate transmitted MacPorts prefix'
        run: >-
          test "${{ steps.macports.outputs.prefix }}" = '/opt/${{ matrix.prefix }}'

      - run: /opt/${{ matrix.prefix }}/bin/port version

      - run: port version

      - name: 'Create cURL package'
        id: package
        if: matrix.prefix == 'package'
        run: |
          sudo port mdmg curl
          image=$(port work curl)/*.dmg
          printf 'image=%s\n' "${image}" >> ${GITHUB_OUTPUT}

      - name: 'Archive Installation Package Image'
        if: matrix.prefix == 'package'
        uses: actions/upload-artifact@v4
        with:
          name: "curl"
          path: "${{ steps.package.outputs.image }}"
